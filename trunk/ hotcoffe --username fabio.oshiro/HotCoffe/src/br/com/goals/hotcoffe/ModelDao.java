package br.com.goals.hotcoffe;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.List;

public class ModelDao {
	private Config config;
	private HashMap<String, Model> mapModel;

	public ModelDao(Config config) {
		this.config = config;
	}

	/**
	 * Algum connection pool
	 * 
	 * @return
	 */
	Connection getConnection() {
		try {
			Class.forName(config.getDbDriver()).newInstance();
			Connection con = DriverManager.getConnection(config.getDbUrl(), config.getDbUser(), config.getDbPassword());
			return con;
		} catch (Exception e) {
			System.out.println(e.getClass() + " " + e.getMessage());
		}
		return null;
	}

	void setMapModel(HashMap<String, Model> mapModel) {
		this.mapModel = mapModel;
	}

	public Model select(String name, Long id) {
		Model model = mapModel.get(name);
		if (model == null)
			return null;
		Connection con = null;
		try {
			con = getConnection();
			PreparedStatement ps = con.prepareStatement("select * From " + name + " where " + model.getNameIdentifier());
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {

			} else {
				return null;
			}
			rs.close();
			ps.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	public void save(Model model) throws HotCoffeException {
		List<Attribute> listAttribute = model.getAttributeList();
		//Criar o SQL de insert
		StringBuilder sbCols = new StringBuilder();
		StringBuilder sbVals = new StringBuilder();
		for (Attribute attribute : listAttribute) {
			if(attribute.autoGeneratedValue) continue;
			//preparar os inserts
			sbCols.append(",").append(attribute.name);
			sbVals.append(",?");
		}
		
		StringBuilder sb = new StringBuilder();
		sb.append("INSERT INTO ")
			.append(model.getName())
			.append("(")
			.append(sbCols.substring(1))
			.append(") values (")
			.append(sbVals.substring(1))
			.append(")");
		
		//Executar o ps
		Connection con = null;
		try {
			con = getConnection();
			PreparedStatement ps = con.prepareStatement(sb.toString());
			int c=1;
			for (Attribute attribute : listAttribute) {
				//verificar o tipo
				if(attribute.autoGeneratedValue) continue;
				if(!attribute.nullAble && attribute.value==null){
					throw new HotCoffeException(Messages.getString(model.getName()+"."+attribute.name+".CannotBeNull"));
				}
				ps.setObject(c,attribute.value);
				c++;
			}
			ps.execute();
			ResultSet rs = ps.getGeneratedKeys();
			if(rs.next()){
				model.setId(rs.getLong(1));
			}
			rs.close();
			ps.close();
		} catch(HotCoffeException e){
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				con.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}	
}
